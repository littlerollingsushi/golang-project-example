// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "littlerollingsushi.com/example/usecase/registration/internal"

	mock "github.com/stretchr/testify/mock"
)

// RegisterUsecase is an autogenerated mock type for the RegisterUsecase type
type RegisterUsecase struct {
	mock.Mock
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *RegisterUsecase) Register(_a0 context.Context, _a1 internal.RegisterUsecaseInput) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.RegisterUsecaseInput) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRegisterUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterUsecase creates a new instance of RegisterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterUsecase(t mockConstructorTestingTNewRegisterUsecase) *RegisterUsecase {
	mock := &RegisterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
