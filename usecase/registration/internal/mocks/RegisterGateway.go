// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "littlerollingsushi.com/example/entity"

	mock "github.com/stretchr/testify/mock"
)

// RegisterGateway is an autogenerated mock type for the RegisterGateway type
type RegisterGateway struct {
	mock.Mock
}

// EncryptPassword provides a mock function with given fields: password, saltLength
func (_m *RegisterGateway) EncryptPassword(password string, saltLength int) (string, error) {
	ret := _m.Called(password, saltLength)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(password, saltLength)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(password, saltLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: _a0, _a1
func (_m *RegisterGateway) InsertUser(_a0 context.Context, _a1 entity.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRegisterGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterGateway creates a new instance of RegisterGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterGateway(t mockConstructorTestingTNewRegisterGateway) *RegisterGateway {
	mock := &RegisterGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
