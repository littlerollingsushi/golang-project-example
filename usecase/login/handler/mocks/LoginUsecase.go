// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "littlerollingsushi.com/example/usecase/login/internal"

	mock "github.com/stretchr/testify/mock"
)

// LoginUsecase is an autogenerated mock type for the LoginUsecase type
type LoginUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, in
func (_m *LoginUsecase) Login(ctx context.Context, in internal.LoginUsecaseInput) (internal.LoginUsecaseOutput, error) {
	ret := _m.Called(ctx, in)

	var r0 internal.LoginUsecaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, internal.LoginUsecaseInput) internal.LoginUsecaseOutput); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(internal.LoginUsecaseOutput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, internal.LoginUsecaseInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoginUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginUsecase creates a new instance of LoginUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginUsecase(t mockConstructorTestingTNewLoginUsecase) *LoginUsecase {
	mock := &LoginUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
