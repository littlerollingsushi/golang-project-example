// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "littlerollingsushi.com/example/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LoginGateway is an autogenerated mock type for the LoginGateway type
type LoginGateway struct {
	mock.Mock
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *LoginGateway) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHashAndPasswordEqual provides a mock function with given fields: hash, password
func (_m *LoginGateway) IsHashAndPasswordEqual(hash string, password string) bool {
	ret := _m.Called(hash, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NowInUTC provides a mock function with given fields:
func (_m *LoginGateway) NowInUTC() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

type mockConstructorTestingTNewLoginGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginGateway creates a new instance of LoginGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginGateway(t mockConstructorTestingTNewLoginGateway) *LoginGateway {
	mock := &LoginGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
